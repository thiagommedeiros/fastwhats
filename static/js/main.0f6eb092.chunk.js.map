{"version":3,"sources":["App.js","service-worker.js","index.js","logo.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","phoneNumber","linkRef","React","createRef","current","click","e","setState","target","value","react_default","a","createElement","className","src","logo","alt","type","placeholder","onChange","changePhone","bind","onClick","createCall","ref","href","concat","rel","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"yOAuEeA,qBAjEb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,YAAa,OAGfR,EAAKS,QAAUC,IAAMC,YAPRX,4EAWbG,KAAKM,QAAQG,QAAQC,4CAGVC,GACXX,KAAKY,SAAS,CACZP,YAAaM,EAAEE,OAAOC,yCAIjB,IACCT,EAAgBL,KAAKI,MAArBC,YACR,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACEE,IAAKC,IACLF,UAAU,OACVG,IAAI,cAENN,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qGAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,cACVI,KAAK,SACLC,YAAY,cACZC,SAAUxB,KAAKyB,YAAYC,KAAK1B,QAElCe,EAAAC,EAAAC,cAAA,+DAEFF,EAAAC,EAAAC,cAAA,UAAQU,QAAS3B,KAAK4B,WAAWF,KAAK1B,OAAtC,kBAIAe,EAAAC,EAAAC,cAAA,KACEC,UAAU,SACVW,IAAK7B,KAAKM,QACVwB,KAAI,oBAAAC,OAAsB1B,EAAtB,uFAENU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KACEa,KAAK,oCACLjB,OAAO,SACPmB,IAAI,uBAHN,uCAtDQC,cCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,YAK1BC,QAAQC,IAAI,6CAGRZ,EAAOa,UACTb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,EAAOc,WACTd,EAAOc,UAAUT,SAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCnFjEC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB7B,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAAV,OAAMkC,aAAN,sBAEP/B,GA2DV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BV,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEA/EAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCrC/BE,sBCXAkC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.0f6eb092.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor () {\n    super()\n    \n    this.state = {\n      phoneNumber: '+55'\n    }\n\n    this.linkRef = React.createRef()\n  }\n\n  createCall () {\n    this.linkRef.current.click()\n  }\n\n  changePhone (e) {\n    this.setState({\n      phoneNumber: e.target.value\n    })\n  }\n\n  render() {\n    const { phoneNumber } = this.state\n    return (\n      <div className=\"container\">\n        <img \n          src={logo}\n          className=\"logo\"\n          alt=\"FastWhats\"\n        />\n        <h1>FastWhats</h1>\n        <p>\n          Inicie uma conversa com você mesmo ou com outra pessoa sem precisar salvar na agenda.\n        </p>\n        <div className=\"input-wrap\">\n          <input \n            className=\"phoneNumber\" \n            type=\"number\"\n            placeholder=\"11999999999\"\n            onChange={this.changePhone.bind(this)}\n          />\n          <span>Digite o DDD e o número (apenas números)</span>\n        </div>\n        <button onClick={this.createCall.bind(this)}>\n          Criar conversa\n        </button>\n        {/*<button>Indicar o FastWhats</button>*/}\n        <a\n          className=\"hidden\"\n          ref={this.linkRef}\n          href={`intent://send/+55${phoneNumber}#Intent;scheme=smsto;package=com.whatsapp;action=android.intent.action.SENDTO;end`}\n        ></a>\n        <div className=\"createdBy\">\n          <a \n            href=\"http://github.com/thiagommedeiros\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n          >\n            Created by Thiago Medeiros\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.6550fcc1.svg\";"],"sourceRoot":""}